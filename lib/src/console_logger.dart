// -----------------------------------------------------------------------------
// Author: Rafael Perez (@rapzaDev)
// Description: Implementation of a console logger utility for Dart applications.
// Provides functions and classes to output debug and log messages to the console,
// aiding developers in tracking application behavior and diagnosing issues during
// development.
// Repository: https://github.com/rapzaDev/debug-utils-flutter
// License: MIT
// -----------------------------------------------------------------------------

import 'package:debug_utils/src/log_formatter.dart';
import 'package:debug_utils/src/logger_interfaces.dart';

/// Logger that records messages to the console with customizable formatting.
///
/// Implements [ILogger] and uses an [ILogFormatter] to format log entries before
/// output. Designed to be lightweight and integrable in Flutter development environments.
class ConsoleLogger implements ILogger {
  /// Formatting for log output, customizable via injection.
  final ILogFormatter _formatter;

  /// Constructor accepting a custom formatter.
  ///
  /// [formatter] defines how log entries are formatted (default: [DefaultLogFormatter]).
  ConsoleLogger({ILogFormatter? formatter})
      : _formatter = formatter ?? DefaultLogFormatter();

  @override

  /// Records a log entry to the console.
  ///
  /// [entry] contains the details of the message to be recorded.
  /// The output is generated by [formatter] and displayed with `print`.
  void log(LogEntry entry) {
    final formatted = _formatter.format(entry);
    // Uses print for compatibility; consider debugPrint in production for better control.
    print(formatted);
  }
}
